generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Roles {
  admin
  teacher
  student
}

enum EnrollmentStatus {
  enrolled
  removed
}

enum ResourceType {
  file
  link
  video
  document
  pdf
  audio
  other
}

enum SubmissionStatus {
  unopened
  seen
  submited
}

model Users {
  id String @id @default(uuid())
  firstName String @db.VarChar(200)
  lastName String @db.VarChar(200)
  email String @unique
  password String @db.VarChar(255)
  role Roles
  createdAt DateTime @default(now())
  updatedAt DateTime?
  phoneNumber String? @db.VarChar(11)
  avatarUrl String?
  bio String? 
  isActive Boolean @default(true)
  isAccountVerified Boolean @default(false)

  validateCodes ValidateAccountCode[]
  loginSession LoginSession[]
  classRooms Classroom[]
  favoriteClassrooms FavoriteClassrooms[]
  enrollments Enrollment[]
}

model ValidateAccountCode {
  id String @id @default(uuid())
  code String 
  createdAt DateTime @default(now())
  
  userId String
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginSession {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  ip String?
  browser String?
  os String?
  device String?
  
  userId String 
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FavoriteClassrooms {
  id String @id @default(uuid())
  
  userId String
  user Users @relation( fields: [userId], references: [id], onDelete: Cascade)

  classroomId String
  classroom Classroom @relation( fields: [classroomId], references: [id], onDelete: Cascade )
}

model Classroom {
  id String @id @default(uuid())
  title String @db.VarChar(200)
  code String @unique @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime? 
  description String?
  img String?
  color String?
  qrCode String?

  instructorId String
  instructor Users @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  favoriteClassrooms FavoriteClassrooms[]
  enrollments Enrollment[]
}

model Enrollment {
  id String @id @default(uuid())
  status EnrollmentStatus @default( enrolled )
  progress Float @default(0.0)
  joinedAt DateTime @default(now())

  studentId String
  student Users @relation(fields: [studentId], references: [id], onDelete: Cascade)

  classroomId String
  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
}